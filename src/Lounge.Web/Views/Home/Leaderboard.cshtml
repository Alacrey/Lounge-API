@using Lounge.Web.Settings
@using Lounge.Web.Stats
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject ILoungeSettingsService LoungeSettingsService
@model Lounge.Web.Models.ViewModels.LeaderboardPageViewModel

@{
    ViewData["Title"] = "Leaderboard";
}

@Html.HiddenFor(m => m.Season)

<div class="navbar navbar-expand-sm navbar-dark bg-dark rounded py-0" style="margin-bottom: 14px;">
    <div class="container-fluid">
        <span class="navbar-brand">Seasons</span>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#seasonSelector">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-md-center" id="seasonSelector">
            <ul class="navbar-nav">
                @foreach (var season in LoungeSettingsService.ValidSeasons)
                {
                    <li class="nav-item">
                        <a class="nav-link @(season == Model.Season ? "active" : "")" asp-action="Leaderboard" asp-route-season="@season">Season @season</a>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
<!form class="mb-3">
    <div class="form-row">
        <div class="form-group col-xl-3 col-6">
            <label for="nameFilter">Name</label>
            <input type="text" class="form-control bg-dark text-light" id="nameFilter">
		</div>
        <div class="form-group col-xl-3 col-6">
            <label for="countryFilter">Country</label>
            <!select class="form-control bg-dark text-light" name="country" id="countryFilter" onchange="refreshLeaderboard()">
                <!option value="" selected>All Countries</!option>

                @foreach (var country in Model.ValidCountries.OrderBy(c => LoungeSettingsService.CountryNames[c]))
                {
                    <!option value="@country">@LoungeSettingsService.CountryNames[country]</!option>
                }
            </!select>
		</div>
        <div class="form-group col-xl-1 col-sm-2 col-3">
            <label for="minMmrFilter">Min&nbsp;MMR</label>
            <input type="number" class="form-control bg-dark text-light" id="minMmrFilter" onchange="refreshLeaderboard()" min=0>
		</div>
        <div class="form-group col-xl-1 col-sm-2 col-3">
            <label for="maxMMRFilter">Max&nbsp;MMR</label>
            <input type="number" class="form-control bg-dark text-light" id="maxMmrFilter" onchange="refreshLeaderboard()" min=0>
		</div>
        <div class="form-group col-xl-1 col-sm-2 col-3">
            <label for="minEventsFilter">Min&nbsp;Events</label>
            <input type="number" class="form-control bg-dark text-light" id="minEventsFilter" onchange="refreshLeaderboard()" min=0>
		</div>
        <div class="form-group col-xl-1 col-sm-2 col-3">
            <label for="maxEventsFilter">Max&nbsp;Events</label>
            <input type="number" class="form-control bg-dark text-light" id="maxEventsFilter" onchange="refreshLeaderboard()" min=0>
		</div>
        <div class="form-group col-xl-2 col-sm-4">
            <label for="nameFilter">Sort By</label>
            <!select class="form-control bg-dark text-light" name="sortOrder" id="sortBySelect" onchange="refreshLeaderboard()">
                @foreach (var sortOrder in Enum.GetValues<LeaderboardSortOrder>())
                {
                    var enumName = sortOrder.ToString();
                    var displyName = typeof(LeaderboardSortOrder).GetMember(enumName).First().GetCustomAttribute<DisplayAttribute>()?.GetName() ?? enumName;
                    <!option value="@enumName" @(sortOrder == LeaderboardSortOrder.Mmr ? "selected" : "")>@displyName</!option>
                }
            </!select>
		</div>
	</div>
</!form>
<div class="text-center">
    <div class="table-responsive">
        <table id="leaderboardTable" class="table table-striped table-dark table-sm">
            <thead>
                <tr>
                    <th>Rank</th>
                    <th style="width: 32px"><!--Country Column--></th>
                    <th>Name</th>
                    <th>MMR</th>
                    <th>Peak MMR</th>
                    <th>Win Rate</th>
                    <th>W&nbsp;-&nbsp;L (Last&nbsp;10)</th>
                    <th>Gain/Loss (Last&nbsp;10)</th>
                    <th>Events Played</th>
                    <th>Largest Gain</th>
                    <th>Largest Loss</th>
                </tr>
            </thead>
            <tbody id="leaderboardTableBody">
                <tr>
                    <td colspan="11">Fetching Leaderboard Data...</td>
			    </tr>
			</tbody>
        </table>
    </div>
    <div>
        <span id="paginationInfo" style="float: left">Page 1 of 1</span>
        <nav>
            <ul class="pagination pagination-dark justify-content-end">
                <li class="page-item disabled" onclick="goToPage(page - 1)" id="prevPageButton"><a class="page-link" href="#">Previous</a></li>
                <li class="page-item disabled" onclick="goToPage(page + 1)" id="nextPageButton"><a class="page-link" href="#">Next</a></li>
            </ul>
        </nav>
	</div>
</div>

<script type="text/javascript">
    var nameFilterElement = document.getElementById("nameFilter");
    var countryFilterElement = document.getElementById("countryFilter");
    var minMmrFilterElement = document.getElementById("minMmrFilter");
    var maxMmrFilterElement = document.getElementById("maxMmrFilter");
    var minEventsFilterElement = document.getElementById("minEventsFilter");
    var maxEventsFilterElement = document.getElementById("maxEventsFilter");
    var sortBySelectElement = document.getElementById("sortBySelect");

    var prevPageButtonElement = document.getElementById("prevPageButton");
    var nextPageButtonElement = document.getElementById("nextPageButton");
    var paginationInfoElement = document.getElementById("paginationInfo");

    var page = 1;
    var pageSize = 50;

    function refreshLeaderboard(resetPage = true) {
        if (resetPage) {
            page = 1;
        }

        console.log("Refreshing leaderboard");
        var currentNameFilter = nameFilterElement.value;
        var currentCountryFilter = countryFilterElement.value;
        var currentMinMmrFilter = minMmrFilterElement.value;
        var currentMaxMmrFilter = maxMmrFilterElement.value;
        var currentMinEventsFilter = minEventsFilterElement.value;
        var currentMaxEventsFilter = maxEventsFilterElement.value;
        var currentSortBy = sortBySelectElement.value;

        var queryParams = [];
        queryParams.push("season=@Model.Season");
        if (page > 1) queryParams.push(`skip=${(page - 1) * pageSize}`);
        if (pageSize !== 50) queryParams.push(`pageSize=${pageSize}`);
        if (currentSortBy !== "Mmr") queryParams.push(`sortBy=${currentSortBy}`);
        if (currentNameFilter) queryParams.push(`search=${currentNameFilter}`);
        if (currentCountryFilter) queryParams.push(`country=${currentCountryFilter}`);
        if (currentMinMmrFilter) queryParams.push(`minMmr=${currentMinMmrFilter}`);
        if (currentMaxMmrFilter) queryParams.push(`maxMmr=${currentMaxMmrFilter}`);
        if (currentMinEventsFilter) queryParams.push(`minEventsPlayed=${currentMinEventsFilter}`);
        if (currentMaxEventsFilter) queryParams.push(`maxEventsPlayed=${currentMaxEventsFilter}`);

        var query = queryParams.join('&'); 
        var url = `/api/player/leaderboard?${query}`;
        fetch(url)
            .then(response => response.json())
            .then(updateLeaderboard)
            .catch((error) => {
                document.getElementById("leaderboardTableBody").innerHTML = `<tr><td colspan="11">Error loading leaderboard data: ${error}</td></tr>`
            });
    }

    function updateLeaderboard(leaderboardData) {
        if (leaderboardData.data.length == 0) {
            document.getElementById("leaderboardTableBody").innerHTML = `<tr><td colspan="11">No players found matching the filter</td></tr>`;
            return;
        }

        var newBody = document.createElement("tbody");
        for (var player of leaderboardData.data) {
            var tr = document.createElement("tr");

            function appendCell(content, withClass) {
                var newCell = document.createElement("td");
                if (withClass)
                    newCell.classList.add(withClass);
                newCell.appendChild(content);
                tr.appendChild(newCell);
            }

            var mmrRankClass = player.mmrRank ? `rank-${player.mmrRank.division}` : null;

            // Rank Column
            var rankCell = document.createElement("th");
            rankCell.scope = "row";
            if (mmrRankClass)
                rankCell.classList.add(mmrRankClass);
            rankCell.innerHTML = player.overallRank || "-";
            tr.appendChild(rankCell);

            // Country Column
            if (player.countryCode) {
                var countryImgElement = document.createElement("img");
                countryImgElement.src = `/img/flags/${player.countryCode}.png`;
                countryImgElement.style = "width: 30px"
                appendCell(countryImgElement);
            } else {
                appendCell(document.createDocumentFragment());
            }

            // Name Column
            var playerLinkElement = document.createElement("a");
            playerLinkElement.href = `/PlayerDetails/${player.id}?season=@Model.Season`;
            playerLinkElement.style = "color:inherit";
            playerLinkElement.appendChild(document.createTextNode(player.name));
            appendCell(playerLinkElement, mmrRankClass);

            appendCell(document.createTextNode(player.mmr >= 0 ? player.mmr : "Placement"), mmrRankClass);
            appendCell(document.createTextNode(player.maxMmr >= 0 ? player.maxMmr : "N/A"), player.maxMmrRank ? `rank-${player.maxMmrRank.division}` : null);

            appendCell(document.createTextNode(player.winRate >= 0 ? `${(player.winRate * 100).toFixed(1)}%` : "N/A"));
            appendCell(document.createTextNode(`${player.winsLastTen} - ${player.lossesLastTen}`));
            appendCell(document.createTextNode(player.gainLossLastTen === undefined ? "N/A" : `${player.gainLossLastTen > 0 ? "+" : ""}${player.gainLossLastTen}`));
            appendCell(document.createTextNode(player.eventsPlayed));
            appendCell(document.createTextNode(player.largestGain ? `+${player.largestGain}` : "-"));
            appendCell(document.createTextNode(player.largestLoss || "-"));

            newBody.appendChild(tr);
        }

        var leaderboardBodyElement = document.getElementById("leaderboardTableBody");
        leaderboardBodyElement.id = "";
        leaderboardBodyElement.parentElement.replaceChild(newBody, leaderboardBodyElement);
        newBody.id = "leaderboardTableBody"

        if (page == 1) {
            prevPageButtonElement.classList.add('disabled');
        } else {
            prevPageButtonElement.classList.remove('disabled');
        }

        var totalPlayers = leaderboardData.totalPlayers;
        var numPages = Math.ceil(totalPlayers / pageSize);
        if (page == numPages) {
            nextPageButtonElement.classList.add('disabled');
        } else {
            nextPageButtonElement.classList.remove('disabled');
        }

        paginationInfoElement.innerHTML = `Page ${page} of ${numPages}`;
    }

    function goToPage(newPage) {
        page = newPage;
        refreshLeaderboard(false);
    }

    var nameFilter = undefined;
    function refreshOnNewNameFilter() {
        var currentNameFilter = nameFilterElement.value;
        if (currentNameFilter !== nameFilter) {
            if (nameFilter !== undefined)
                refreshLeaderboard();
            nameFilter = currentNameFilter;
        }
        setTimeout(refreshOnNewNameFilter, 1000);
    }

    document.addEventListener("DOMContentLoaded", function () {
        refreshLeaderboard();
        refreshOnNewNameFilter();
    });
</script>